{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAEhC,OAAO,IAAIC,SAAQ,CAACC,EAASC,IAAWC,YAAW,KAEpBC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAACH,E,MAAUC,IAGnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,GAG5BA,I,EA9CI,CACbO,KAAMC,SAASC,cAAc,WAGxBF,KAAKG,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAMC,iBAEJ,IAAIC,EAAQC,OAAOH,EAAMI,cAAcC,SAAShB,MAAMiB,OAClDC,EAAOJ,OAAOH,EAAMI,cAAcC,SAASE,KAAKD,OAChDE,EAASL,OAAOH,EAAMI,cAAcC,SAASG,OAAOF,OAExD,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAEhCrB,SAAWqB,EAETtB,EAAcC,SAAUc,GAEvBQ,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,OAC5DyB,QAAMC,IAAI,uBAAqB3B,QAAiBC,MAAU,IAE7D2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBsB,EAAA1B,GAAS2B,OAAOK,QAAQ,sBAAoB7B,QAAiBC,OAC3DyB,QAAMC,IAAI,sBAAoB3B,QAAiBC,MAAU,IAG7Da,GAASK,EAEXP,EAAMkB,OAAOC,O","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst refs = { \nform: document.querySelector('.form'),  \n}\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event){\n  event.preventDefault();\n\n    let delay = Number(event.currentTarget.elements.delay.value);\n    let step = Number(event.currentTarget.elements.step.value);\n    let amount = Number(event.currentTarget.elements.amount.value);\n\n    for( let i = 1; i <= amount; i += 1) {\n\n      position = i;\n      \n        createPromise(position, delay)\n      \n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n      \n        delay += step;\n      }\n      event.target.reset();\n      \n}\n\nfunction createPromise(position, delay){\n\n return new Promise((resolve, reject) => setTimeout(()=> {\n          \n          const shouldResolve = Math.random() > 0.3;\n          if (shouldResolve) {\n            resolve({position, delay})\n        \n        } else {\n            reject({position, delay})\n          } \n  \n      }, delay))\n}\n\n// =============================================================================================\n// const refs = { \n//   form: document.querySelector('.form'),  \n//   firstDelay: document.querySelector('[name = \"delay\"]'),\n//   delayStep: document.querySelector('[name = \"step\"]'),\n//   amount: document.querySelector('[name=\"amount\"]'),\n//   }\n\n// const delay = refs.firstDelay.value;\n// const step = refs.delayStep.value\n// const amount = refs.amount.value;\n\n// ====================================================\n\n\n      //   for( let i = 0; i < amount; i += 1){\n      //     const position = i+1;\n      //      new Promise((resolve, reject) => setTimeout(()=> {\n          \n      //         const shouldResolve = Math.random() > 0.3;\n      //         if (shouldResolve) {\n      //             resolve(position)\n            \n      //       } else {\n      //           reject(position)\n      //         } \n      \n      //     }, myDelay + (step * i )))\n      // } \n\n\n // ====================================================\n\n// for(let i =0; i<randomnumb) {\n//     setTimeout(()=> какая-то функция, i*300  )}\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","form","document","querySelector","addEventListener","event","preventDefault","delay1","Number","currentTarget","elements","value","step","amount","i","then","$parcel$interopDefault","Notify","success","console","log","catch","failure","target","reset"],"version":3,"file":"03-promises.37e5205a.js.map"}